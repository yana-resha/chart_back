import { BelongsTo, Column, DataType, HasMany, Model, Table } from 'sequelize-typescript'
import { ApiProperty } from '@nestjs/swagger'
import { GeonamesCountry } from './geonames-country.model'
import { GeonamesAdmin2 } from './geonames-admin-2.model'
import { GeonamesCity } from './geonames-city.model'

@Table({
  tableName: 'geonames_admin_1',
  createdAt: false,
  updatedAt: false,
  deletedAt: false,
})
export class GeonamesAdmin1 extends Model<GeonamesAdmin1> {
  @ApiProperty({ example: 'US.01', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä GeoNames –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞' })
  @Column({ type: DataType.STRING, primaryKey: true })
  geonameid: string

  @ApiProperty({ example: 'California', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ (ASCII)' })
  @Column({ type: DataType.STRING })
  asciiname: string

  @ApiProperty({ example: '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ' })
  @Column({ type: DataType.STRING })
  asciiname_ru: string

  @ApiProperty({ example: 'US', description: '–î–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (ISO 3166-1 alpha-2)' })
  @Column({ type: DataType.STRING })
  country: string

  // üëâ –°–≤—è–∑—å —Å–æ —Å—Ç—Ä–∞–Ω–æ–π
  @BelongsTo(() => GeonamesCountry, {
    foreignKey: 'country',
    targetKey: 'iso',
    constraints: false,
  })
  country_data: GeonamesCountry

  // –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏

  @HasMany(() => GeonamesAdmin2, {
    foreignKey: 'admin1_id',
    sourceKey: 'geonameid',
  })
  admin2Regions: GeonamesAdmin2[]

  @HasMany(() => GeonamesCity, {
    foreignKey: 'admin1_id', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏
    sourceKey: 'geonameid',
  })
  cities: GeonamesCity[]
}
