import { Injectable, Logger } from '@nestjs/common'
import { InjectModel } from '@nestjs/sequelize'
import { GeonamesCountry } from 'src/locality/models/geonames-country.model'
import { Op } from 'sequelize'
import { AppException } from 'src/common/errors/app.exception'
import { GeonamesAdmin1 } from 'src/locality/models/geonames-admin-1.model'
import { GeonamesAdmin2 } from 'src/locality/models/geonames-admin-2.model'
import { GeonamesCity } from 'src/locality/models/geonames-city.model'

const ADMIN_2_GLOSSARY = [
  // ‚úÖ –¢–µ—Ä–º–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
  { sourceText: 'Bashkia', translatedText: '–ë–∞—à–∫–∏–∞' },
  { sourceText: 'Partido de', translatedText: '–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç' },
  { sourceText: 'Municipality', translatedText: '–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç' },
  { sourceText: 'Commune', translatedText: '–ö–æ–º–º—É–Ω–∞' },
  { sourceText: 'Province', translatedText: '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è' },
  { sourceText: 'Prefecture', translatedText: '–ü—Ä–µ—Ñ–µ–∫—Ç—É—Ä–∞' },
  { sourceText: 'County', translatedText: '–ì—Ä–∞—Ñ—Å—Ç–≤–æ' },
  { sourceText: 'Canton', translatedText: '–ö–∞–Ω—Ç–æ–Ω' },
  { sourceText: 'Oblast', translatedText: '–û–±–ª–∞—Å—Ç—å' },
  { sourceText: 'State', translatedText: '–®—Ç–∞—Ç' },
  { sourceText: 'Wilaya', translatedText: '–í–∏–ª–∞–π–µ—Ç' },
  { sourceText: 'Kecamatan', translatedText: '–ö–µ–∫–∞–º–∞—Ç–∞–Ω' },
  { sourceText: 'Kabupaten', translatedText: '–ö–∞–±—É–ø–∞—Ç–µ–Ω' },
  { sourceText: 'Arrondissement', translatedText: '–û–∫—Ä—É–≥' },
  { sourceText: 'Voivodeship', translatedText: '–í–æ–µ–≤–æ–¥—Å—Ç–≤–æ' },
  { sourceText: 'Raion', translatedText: '–†–∞–π–æ–Ω' },
  { sourceText: 'Nawahi', translatedText: '–ù–∞–≤–∞—Ö–∏' },
  { sourceText: 'Mouhafazat', translatedText: '–ú—É—Ö–∞—Ñ–∞–∑–∞' },
  { sourceText: 'Distrito Municipal', translatedText: '–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥' },
  { sourceText: 'Comuna', translatedText: '–ö–æ–º–º—É–Ω–∞' },
  { sourceText: 'Politischer Bezirk', translatedText: '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–∫—Ä—É–≥' },
  { sourceText: 'Municipio de', translatedText: '–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç' },
  { sourceText: 'Borough of', translatedText: '–ë–æ—Ä–æ' },
  { sourceText: 'pagasts', translatedText: '–í–æ–ª–æ—Å—Ç—å' },
  { sourceText: 'Barrio', translatedText: '–ö–≤–∞—Ä—Ç–∞–ª' },
  { sourceText: 'Barrio-Pueblo', translatedText: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–≤–∞—Ä—Ç–∞–ª' },
  { sourceText: 'Kommun', translatedText: '–ö–æ–º–º—É–Ω–∞' }, // –®–≤–µ—Ü–∏—è
  // üìç –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–ø–æ–Ω–∏–º—ã
  { sourceText: 'Blacktown', translatedText: '–ë–ª—ç–∫—Ç–æ–Ω' },
  { sourceText: 'Shellharbour', translatedText: '–®–µ–ª–ª—Ö–∞—Ä–±–æ—Ä' },
  { sourceText: 'Snowy Monaro Regional', translatedText: '–†–µ–≥–∏–æ–Ω –°–Ω–æ—É–∏-–ú–æ–Ω–∞—Ä–æ' },
  { sourceText: 'Cairns', translatedText: '–ö—ç—Ä–Ω—Å' },
  { sourceText: 'Robe', translatedText: '–†–æ—É–±' },
  { sourceText: 'Tea Tree Gully', translatedText: '–¢–∏-–¢—Ä–∏-–ì–∞–ª–ª–∏' },
  { sourceText: 'Meander Valley', translatedText: '–î–æ–ª–∏–Ω–∞ –ú–∏–∞–Ω–¥–µ—Ä' },
  { sourceText: 'Cocos', translatedText: '–ö–æ–∫–æ—Å–æ–≤—ã–µ –æ—Å—Ç—Ä–æ–≤–∞' },
  { sourceText: 'Itarantim', translatedText: '–ò—Ç–∞—Ä–∞–Ω—Ç–∏–º' },
  { sourceText: 'Silverwood', translatedText: '–°–∏–ª—å–≤–µ—Ä–≤—É–¥' },
  { sourceText: 'Wee Too Beach', translatedText: '–ü–ª—è–∂ –£–∏-–¢—É' },
  { sourceText: 'Bigwoods', translatedText: '–ë–∏–≥–≤—É–¥—Å' },
  { sourceText: 'Rose Hall', translatedText: '–†–æ—É–∑ –•–æ–ª–ª' },
  { sourceText: 'Red Bank', translatedText: '–†–µ–¥-–ë—ç–Ω–∫' },
  { sourceText: 'Pepper', translatedText: '–ü–µ–ø–ø–µ—Ä' },
  { sourceText: 'Warminster', translatedText: '–£–æ—Ä–º–∏–Ω—Å—Ç–µ—Ä' },
]

const SYSTEM_PROMPT = `
–¢—ã ‚Äî —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –∞ –ø–µ—Ä–µ–¥–∞–≤–∞–π –µ–≥–æ –∑–≤—É—á–∞–Ω–∏–µ, –∫–∞–∫ –æ–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—Å—è.

üîπ –ü—Ä–∏–º–µ—Ä—ã:
White ‚Üí –£–∞–π—Ç
Lake City ‚Üí –õ–µ–π–∫-–°–∏—Ç–∏
Mount Vernon ‚Üí –ú–∞—É–Ω—Ç-–í–µ—Ä–Ω–æ–Ω
Fort Worth ‚Üí –§–æ—Ä—Ç-–£—ç—Ä—Ç
Saint George ‚Üí –°–µ–π–Ω—Ç-–î–∂–æ—Ä–¥–∂

–í–∞–∂–Ω–æ:
- –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ñ–∏—Å—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ).
- –†–∞–±–æ—Ç–∞–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–∞–∫, –∫–∞–∫ –∏—Ö –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –Ω–æ—Å–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ –ø–µ—Ä–µ–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è. –î–∞–∂–µ –µ—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∑–≤—É—á–∞–Ω–∏—é.
`.trim()

@Injectable()
export class TranslateService {
  private readonly logger = new Logger(TranslateService.name)
  constructor(
    @InjectModel(GeonamesCountry) private readonly countryModel: typeof GeonamesCountry,
    @InjectModel(GeonamesAdmin1) private readonly geonamesAdmin1: typeof GeonamesAdmin1,
    @InjectModel(GeonamesAdmin2) private readonly geonamesAdmin2: typeof GeonamesAdmin2,
    @InjectModel(GeonamesCity) private readonly geonamesCity: typeof GeonamesCity,
  ) {
    this.transcribeCitiesWithLlm()
  }

  /**
   * –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –≥–æ—Ä–æ–¥–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º `asciiname`, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–æ `asciiname_ru`,
   * –∏ –∫–æ–ø–∏—Ä—É–µ—Ç `asciiname_ru` –≤ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–∫–∏–º –∂–µ `asciiname`, –≥–¥–µ `asciiname_ru` –ø—É—Å—Ç.
   */
  async fillMissingRussianNamesByAsciiName(): Promise<void> {
    const citiesWithRu = await this.geonamesCity.findAll({
      where: {
        asciiname_ru: {
          [Op.ne]: null,
        },
      } as any,
      attributes: ['asciiname', 'asciiname_ru'],
      group: ['asciiname', 'asciiname_ru'],
    })

    let totalUpdated = 0

    for (const city of citiesWithRu) {
      const { asciiname, asciiname_ru } = city

      const [updatedCount] = await this.geonamesCity.update(
        { asciiname_ru },
        {
          where: {
            asciiname,
            asciiname_ru: {
              [Op.or]: [null, ''],
            },
          } as any,
        },
      )

      if (updatedCount > 0) {
        totalUpdated += updatedCount
        this.logger.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Å—Ç—Ä–æ–∫ –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${asciiname}" ‚Üí "${asciiname_ru}"`)
      }
    }

    this.logger.log(`üéâ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalUpdated} —Å—Ç—Ä–æ–∫.`)
  }

  private async fetchLlmTranscription(cityName: string): Promise<string | null> {
    const response = await fetch('http://localhost:1234/v1/chat/completions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        model: 'mistralai/mistral-nemo-instruct-2407',
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: `–ù–∞–∑–≤–∞–Ω–∏–µ: ${cityName}` },
        ],
        temperature: 0.4,
        max_tokens: 50,
      }),
    })

    const data = await response.json()

    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return data?.choices?.[0]?.message?.content?.trim() || null
  }

  private async fetchYandexTranslator({
    sourceLanguageCode = 'en',
    targetLanguageCode = 'ru',
    texts,
    glossaryPairs,
  }: {
    sourceLanguageCode?: string
    targetLanguageCode?: string
    texts: string[]
    glossaryPairs?: { sourceText: string; translatedText: string }[]
  }) {
    if (texts.length <= 0) {
      new AppException('400', `–û—Ç—Å—É—Ç—Å–≤—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`)
    }
    const glossaryConfig =
      glossaryPairs && glossaryPairs.length > 0
        ? {
            glossaryData: {
              glossaryPairs,
            },
          }
        : undefined
    const response = await fetch('https://translate.api.cloud.yandex.net/translate/v2/translate', {
      method: 'POST',
      headers: {
        Authorization: `API-key ${process.env.TRANSLATE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        folderId: process.env.TRANSLATE_FOLDER_ID,
        sourceLanguageCode,
        targetLanguageCode,
        texts,
        glossaryConfig,
        speller: false,
      }),
    })

    const data = await response.json()
    return data as {
      translations: {
        text: string[]
      }
    }
  }

  async transcribeCitiesWithLlm() {
    const BATCH_SIZE = 5000
    let offset = 0
    let batchNumber = 1

    while (true) {
      const cities = await this.geonamesCity.findAll({
        attributes: ['asciiname'],
        where: {
          asciiname_ru: { [Op.or]: [null, ''] },
        },
        group: ['asciiname'],
        order: [['asciiname', 'ASC']],
        limit: BATCH_SIZE,
        offset,
      } as any)

      if (cities.length === 0) break

      this.logger.log(`üåÄ –ë–∞—Ç—á #${batchNumber} (${cities.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π)`)

      for (let i = 0; i < cities.length; i++) {
        const { asciiname } = cities[i]

        try {
          const transcription = await this.fetchLlmTranscription(asciiname)

          if (transcription) {
            await this.geonamesCity.update({ asciiname_ru: transcription }, {
              where: {
                asciiname,
                asciiname_ru: { [Op.or]: [null, ''] },
              },
            } as any)
            this.logger.log(`‚úÖ ${i + 1}/${cities.length} | "${asciiname}" ‚Üí ${transcription}`)
          }
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞: "${asciiname}" ‚Äî ${error.message}`)
        }

        await this.sleep(10)
      }

      offset += BATCH_SIZE
      batchNumber++
    }

    this.logger.log('üéâ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
  }

  async translateCityInBatches() {
    const BATCH_SIZE = 10000
    let offset = 0
    let batch: GeonamesCity[] = []
    let batchNumber = 1

    while (true) {
      batch = await this.geonamesCity.findAll({
        where: {
          asciiname_ru: { [Op.is]: null },
          country: 'BG',
        } as any,
        limit: BATCH_SIZE,
        offset,
        order: [['geonameid', 'ASC']],
      })
      // —è —Ç—É—Ç —Ç–∞–∫ –ø–∏—à—É, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –≤–∫–ª—é—á–∏–ª–æ—Å—å, —É–±—Ä–∞—Ç—å return –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      //return

      if (batch.length === 0) break

      this.logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ #${batchNumber}, –∑–∞–ø–∏—Å–µ–π: ${batch.length}`)

      for (let i = 0; i < batch.length; i++) {
        const city = batch[i]
        try {
          const response = await this.fetchYandexTranslator({
            texts: [city.asciiname],
          })
          const translated = response.translations[0].text
          if (translated) {
            await this.geonamesCity.update(
              { asciiname_ru: translated },
              { where: { geonameid: city.geonameid } },
            )
            this.logger.log(`‚úÖ ${i + 1}/${batch.length} | "${city.asciiname}" ‚Üí ${translated}`)
          }
        } catch (error) {
          this.logger.error(`‚ùå ${i + 1}/${batch.length} | –û—à–∏–±–∫–∞ –¥–ª—è "${city.asciiname}": ${error.message}`)
        }
        await this.sleep(300)
      }

      this.logger.log(`–ë–∞—Ç—á #${batchNumber} –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ`)
      offset += BATCH_SIZE
      batchNumber++
    }

    this.logger.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à—ë–Ω.')
  }

  async translateAdmin2InBatches() {
    const BATCH_SIZE = 10000
    let offset = 0
    let batch: GeonamesAdmin2[] = []
    let batchNumber = 1

    while (true) {
      batch = await this.geonamesAdmin2.findAll({
        where: {
          asciiname_ru: { [Op.is]: null },
        } as any,
        limit: BATCH_SIZE,
        offset,
        order: [['geonameid', 'ASC']],
      })
      // —è —Ç—É—Ç —Ç–∞–∫ –ø–∏—à—É, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –≤–∫–ª—é—á–∏–ª–æ—Å—å, —É–±—Ä–∞—Ç—å return –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      return

      if (batch.length === 0) break

      this.logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ #${batchNumber}, –∑–∞–ø–∏—Å–µ–π: ${batch.length}`)

      for (let i = 0; i < batch.length; i++) {
        const admin = batch[i]
        try {
          const response = await this.fetchYandexTranslator({
            texts: [admin.asciiname],
            glossaryPairs: ADMIN_2_GLOSSARY,
          })
          const translated = response.translations[0].text
          if (translated) {
            await this.geonamesAdmin2.update(
              { asciiname_ru: translated },
              { where: { geonameid: admin.geonameid } },
            )
            this.logger.log(`‚úÖ ${i + 1}/${batch.length} | "${admin.asciiname}" ‚Üí ${translated}`)
          }
        } catch (error) {
          this.logger.error(`‚ùå ${i + 1}/${batch.length} | –û—à–∏–±–∫–∞ –¥–ª—è "${admin.asciiname}": ${error.message}`)
        }
        await this.sleep(300)
      }

      this.logger.log(`–ë–∞—Ç—á #${batchNumber} –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ`)
      offset += BATCH_SIZE
      batchNumber++
    }

    this.logger.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à—ë–Ω.')
  }

  async translateAdmin1() {
    const admins1 = await this.geonamesAdmin1.findAll({
      where: {
        asciiname_ru: { [Op.is]: null },
      } as any,
    })
    // —è —Ç—É—Ç —Ç–∞–∫ –ø–∏—à—É, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –≤–∫–ª—é—á–∏–ª–æ—Å—å, —É–±—Ä–∞—Ç—å return –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    return
    for (let i = 0; i < admins1.length; i++) {
      const admin = admins1[i]

      try {
        const response = await this.fetchYandexTranslator({ texts: [admin.asciiname] })
        const translated = response.translations[0].text
        if (translated) {
          await this.geonamesAdmin1.update(
            { asciiname_ru: translated },
            { where: { geonameid: admin.geonameid } },
          )
          this.logger.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏ "${admin.asciiname}": ${translated}`)
        }
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ "${admin.asciiname}": ${error.message}`)
      }
      await this.sleep(300) // –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã
    }
    this.logger.log('–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ')
  }

  async translateCountries() {
    const countries = await this.countryModel.findAll({
      where: {
        country_ru: { [Op.is]: null },
      } as any,
    })

    if (countries.length === 0) {
      this.logger.log('–í—Å–µ —Å—Ç—Ä–∞–Ω—ã —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã üéâ')
      return
    }

    // —è —Ç—É—Ç —Ç–∞–∫ –ø–∏—à—É, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –≤–∫–ª—é—á–∏–ª–æ—Å—å, —É–±—Ä–∞—Ç—å return –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    return
    for (let i = 0; i < countries.length; i++) {
      const country = countries[i]

      try {
        const response = await this.fetchYandexTranslator({ texts: [country.name] })
        const translated = response.translations[0].text
        if (translated) {
          await this.countryModel.update({ name_ru: translated }, { where: { iso: country.iso } })
          this.logger.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏ "${country.name_ru}": ${translated}`)
        }
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ "${country.name}": ${error.message}`)
      }
      await this.sleep(300) // –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã
    }
    this.logger.log('–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ')
  }

  private async sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms))
  }
}
